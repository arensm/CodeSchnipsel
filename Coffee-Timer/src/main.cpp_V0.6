// https://claude.ai/chat/f30de9e9-114e-40b3-a81f-32cd40f9b1ac

#include <Arduino.h>
#include <TM1637Display.h>

// Pin definitions for the 7-segment displays
#define CLK 2         // Clock pin (SCLK)
#define DIO 3         // Data pin (SDI)
#define LOAD 4        // Load pin (LOAD)
TM1637Display display(CLK, DIO);

// Pin definitions for the rotary encoder
#define ENCODER_PIN_A 5 // Encoder output A
#define ENCODER_PIN_B 6 // Encoder output B
#define ENCODER_SWITCH 7 // Encoder switch (button)

// Pin for the relay module
#define RELAY_PIN 8

// Debounce constants
const unsigned long DEBOUNCE_DELAY = 50;  // 50 ms debounce time

// Variables
int currentCount = 0;
bool counting = false;
unsigned long previousMillis = 0;
const int interval = 1000;

// Debounce variables
int lastEncoderA = HIGH;
unsigned long lastDebounceTime = 0;
int lastSwitchState = HIGH;

void setup() {
  pinMode(RELAY_PIN, OUTPUT);
  digitalWrite(RELAY_PIN, LOW);
  
  pinMode(ENCODER_PIN_A, INPUT_PULLUP);
  pinMode(ENCODER_PIN_B, INPUT_PULLUP);
  pinMode(ENCODER_SWITCH, INPUT_PULLUP);

  display.setBrightness(7);
  display.clear();

  Serial.begin(9600);
  Serial.println("Timer Ready. Waiting for input...");
}

void loop() {
  // Encoder rotation handling with serial output
  int currentA = digitalRead(ENCODER_PIN_A);
  
  if (!counting) {
    // Check for encoder rotation
    if (currentA != lastEncoderA) {
      delay(5); // Small delay for stability
      
      if (currentA == LOW) {
        // Only trigger on falling edge
        if (digitalRead(ENCODER_PIN_B) == HIGH) {
          // Clockwise
          currentCount = (currentCount + 1) % 100;
          Serial.print("Encoder turned clockwise. Current count: ");
          Serial.println(currentCount);
        } else {
          // Counter-clockwise
          currentCount = (currentCount - 1 + 100) % 100;
          Serial.print("Encoder turned counter-clockwise. Current count: ");
          Serial.println(currentCount);
        }
        display.showNumberDecEx(currentCount, 0b01000000, true);
      }
      
      lastEncoderA = currentA;
    }

    // Button press handling
    int currentSwitchState = digitalRead(ENCODER_SWITCH);
    
    if (lastSwitchState == HIGH && currentSwitchState == LOW) {
      // Debounce
      delay(50);
      if (digitalRead(ENCODER_SWITCH) == LOW) {
        // Button pressed
        Serial.println("Encoder button pressed. Countdown started.");
        counting = true;
        digitalWrite(RELAY_PIN, HIGH);
        previousMillis = millis();
      }
    }
    
    lastSwitchState = currentSwitchState;
  } else {
    // Countdown logic
    if (millis() - previousMillis >= interval) {
      previousMillis = millis();
      currentCount--;
      
      Serial.print("Counting down. Current value: ");
      Serial.println(currentCount);
      
      display.showNumberDecEx(currentCount, 0b01000000, true);
      
      if (currentCount <= 0) {
        Serial.println("Countdown finished. Relay off.");
        counting = false;
        digitalWrite(RELAY_PIN, LOW);
        display.clear();
        currentCount = 0;
      }
    }

    // Option to stop countdown with button
    int currentSwitchState = digitalRead(ENCODER_SWITCH);
    if (lastSwitchState == HIGH && currentSwitchState == LOW) {
      delay(50);
      if (digitalRead(ENCODER_SWITCH) == LOW) {
        Serial.println("Countdown stopped.");
        counting = false;
        digitalWrite(RELAY_PIN, LOW);
        display.clear();
        currentCount = 0;
      }
    }
    lastSwitchState = currentSwitchState;
  }
}